name: DevStack Automation Pipeline

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  schedule:
    - cron: '0 2 * * *'  # Execução diária às 2h (ajustar horário conforme necessidade)

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Instalar dependências Python
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configurar Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Instalar dependências Node.js
        run: npm install

      - name: Instalar Kilo Code (exemplo, ajuste conforme necessário)
        run: |
          git clone https://github.com/Kilo-Org/kilocode.git
          cd kilocode
          ./install.sh

  lint_test:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Rodar Super Linter
        uses: github/super-linter@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Rodar testes Python
        run: pytest

      - name: Rodar testes Node.js
        run: npm test

  ai_generation:
    needs: lint_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Gerar código via Gemini CLI
        run: |
          # Exemplo básico, adapte para seu comando real
          gemini generate --input ./specify/spec_file.md --output ./src/generated_code.py

      - name: Gerar código via Kilo Code
        run: |
          git clone https://github.com/Kilo-Org/kilocode.git
          cd kilocode
          ./kilocode generate --project ../ --output ../src/kilo_generated_code.py

  deploy:
    needs: ai_generation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Build e deploy
        run: |
          npm run build
          ./deploy.sh  # Script de deploy adaptado ao seu ambiente

  notify:
    needs: [lint_test, ai_generation, deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Notificar Slack (exemplo)
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}